openapi: 3.0.0
info:
  title: Marketplace API
  version: 1.0.0
  description: API for managing jobs, bids, and users in the marketplace system

servers:
  - url: http://localhost:3000/api

paths:
  /jobs:
    get:
      summary: Get all jobs.
      description: Get all jobs.
      parameters: []
      responses:
        '200':
          description: A list of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'

    post:
      summary: Create a new job.
      description: Create a new job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          description: Job created successfully
        '400':
          description: Invalid request

  /jobs/{id}:
    get:
      summary: Get a specific job by ID.
      description: Get a specific job by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the job to retrieve
      responses:
        '200':
          description: A job object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '404':
          description: Job not found

  /jobs/{id}/bids:
    post:
      summary: Place a new bid on a specific job.
      description: Place a new bid on a specific job.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the job for the bid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bid'
      responses:
        '201':
          description: Bid placed successfully
        '400':
          description: Invalid request
        '404':
          description: Job not found

  /jobs:
    get:
      summary: Retrieve jobs based on filters such as most recent or most active.
      description: Retrieve jobs based on filters such as most recent or most active.
      parameters:
        - in: query
          name: filter
          required: false
          schema:
            type: string
            enum: [most_recent, most_active]
          description: Filter to apply to job listings
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: Maximum number of jobs to retrieve
      responses:
        '200':
          description: A filtered list of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          description: Invalid query parameter

  /users:
    post:
      summary: Create a new user.
      description: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request

components:
  schemas:
    Job:
      type: object
      properties:
        id:
          type: string
          example: 'job1'
        description:
          type: string
          example: 'Test Job 1'
        requirements:
          type: array
          items:
            type: string
          example: ['JavaScript', 'React']
        poster:
          type: object
          properties:
            id:
              type: string
              example: 'user1'
            name:
              type: string
              example: 'John'
            contactInfo:
              type: object
              properties:
                emailAddress:
                  type: string
                  example: 'john@example.com'
        auctionStartDate:
          type: string
          format: date-time
          example: '2024-09-29T10:00:00Z'
        auctionEndDate:
          type: string
          format: date-time
          example: '2024-10-06T10:00:00Z'

    Bid:
      type: object
      properties:
        bidId:
          type: string
          example: 'bid1'
        amount:
          type: string
          example: '500'
        bidderId:
          type: string
          example: 'user2'

    User:
      type: object
      properties:
        id:
          type: string
          example: 'user1'
        name:
          type: string
          example: 'Jim Koch'
        emailAddress:
          type: string
          example: 'jimkoch@gmail.com'
        phoneNumber:
          type: string
          example: '404-840-9554'
